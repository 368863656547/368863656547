AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create the instance that will be used to set up the kubernetes cluster for the showcase.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: 'ShowcaseKeyPair'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: 'The IP address range that can be used to SSH to the EC2 instance'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-97785bed
      HVMG2: ami-0a6e3770
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-f2d3638a
      HVMG2: ami-ee15a196
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-824c4ee2
      HVMG2: ami-0da4a46d
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-d834aba1
      HVMG2: ami-af8013d6
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-403e2524
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      PV64: NOT_SUPPORTED
      HVM64: ami-8ee056f3
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-5652ce39
      HVMG2: ami-1d58ca72
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-ceafcba8
      HVMG2: ami-edfd658b
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-863090e8
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      PV64: NOT_SUPPORTED
      HVM64: ami-83444afe
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-68097514
      HVMG2: ami-c06013bc
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-942dd1f6
      HVMG2: ami-85ef12e7
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-531a4c3c
      HVMG2: ami-411e492e
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f63b1193
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-a954d1cd
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-84175ae8
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-cb19c4a6
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      PV64: ami-80707be2
      HVM64: ami-3e60745c
      HVMG2: NOT_SUPPORTED
Resources:
  KopsInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      # IamInstanceProfile: !Ref EC2AdminAccessProfile
      IamInstanceProfile: "EC2AdminAccessProfile"
      SecurityGroups:
        - !Ref KopsInstanceSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: KOPS Instance
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - | 
              # Updates ziehen
              sudo yum -y update
            - | 
              # Environment-Variablen (KOPS_STATE_STORE muss aws-weit eindeutig sein und erhält daher einen Random-Zusatz)
              export AWS_REGION=eu-central-1
              export AWS_AVAILABILITY_ZONES=eu-central-1a,eu-central-1b,eu-central-1c
              export AWS_CLUSTER_IMAGE=kope.io/k8s-1.8-debian-stretch-amd64-hvm-ebs-2018-02-08
              export AWS_CLUSTER_NAME=k8s-showcase.cluster.k8s.local
              export AWS_MASTER_SIZE=t2.medium
              export AWS_NODE_SIZE=t2.medium
              export AWS_PROFILE=default
              export KOPS_STATE_STORE=kops-state-store-`tr -dc 'a-f0-9' < /dev/urandom | dd bs=1 count=32 2>/dev/null`
              export AWS_SSH_ACCESS=139.2.0.0/16 
            - |
              # Environment-Variablen permanent verfügbar machen
              echo "export AWS_REGION=${AWS_REGION}" >> /home/ec2-user/.bashrc
              echo "export AWS_AVAILABILITY_ZONES=${AWS_AVAILABILITY_ZONES}" >> /home/ec2-user/.bashrc
              echo "export AWS_CLUSTER_IMAGE=${AWS_CLUSTER_IMAGE}" >> /home/ec2-user/.bashrc
              echo "export AWS_CLUSTER_NAME=${AWS_CLUSTER_NAME}" >> /home/ec2-user/.bashrc
              echo "export AWS_MASTER_SIZE=${AWS_MASTER_SIZE}" >> /home/ec2-user/.bashrc
              echo "export AWS_NODE_SIZE=${AWS_NODE_SIZE}" >> /home/ec2-user/.bashrc
              echo "export AWS_PROFILE=${AWS_PROFILE}" >> /home/ec2-user/.bashrc
              echo "export KOPS_STATE_STORE=${KOPS_STATE_STORE}" >> /home/ec2-user/.bashrc
              echo "export AWS_SSH_ACCESS=${AWS_SSH_ACCESS}" >> /home/ec2-user/.bashrc
            - | 
              # aws configure
              mkdir /home/ec2-user/.aws
              echo "[default]" > /home/ec2-user/.aws/config
              echo "output = json" >> /home/ec2-user/.aws/config
              echo "region = ${AWS_REGION}" >> /home/ec2-user/.aws/config
              # root needs aws configure as well
              mkdir ~/.aws
              cp /home/ec2-user/.aws/config ~/.aws/config
              # Credentials sind nicht nötig (Instanzrolle)
            - |
              # installieren von kops
              wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
              chmod +x ./kops
              sudo mv ./kops /usr/local/bin/
            - |
              # installieren von kubectl
              wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              sudo mv ./kubectl /usr/local/bin/kubectl
            - |
              # Installieren von Docker
              sudo yum -y install docker
              sudo service docker start
              sudo usermod -a -G docker ec2-user
              # um ohne sudo auszukommen, muss man sich neu anmelden: exit + Session neu verbinden
            - |
              # Installieren von Docker-compose
              curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-Linux-x86_64 > ./docker-compose
              sudo mv ./docker-compose /usr/bin/docker-compose
              sudo chmod +x /usr/bin/docker-compose
            - |
              # Anlegen des KOPS state store falls er noch nicht existiert
              # if aws s3 ls s3://${KOPS_STATE_STORE} 2>&1 | grep -q 'An error occurred'
              # then
                aws s3api create-bucket --bucket ${KOPS_STATE_STORE} --region ${AWS_REGION} --create-bucket-configuration LocationConstraint=${AWS_REGION}
                aws s3api put-bucket-versioning --bucket ${KOPS_STATE_STORE} --versioning-configuration Status=Enabled
              # fi
            - |
              # anlegen einiger nützlicher Skripte
              echo "#!/bin/bash" > /home/ec2-user/create-kops-cluster
              echo "kops create cluster ${AWS_CLUSTER_NAME} --image=${AWS_CLUSTER_IMAGE} --zones=${AWS_AVAILABILITY_ZONES} --master-size=${AWS_MASTER_SIZE} --node-size=${AWS_NODE_SIZE} --networking=flannel --ssh-access=139.2.0.0/16 --ssh-public-key=~/.ssh/authorized_keys --state=${KOPS_STATE_STORE} --cloud aws --topology private --yes" >> /home/ec2-user/create-kops-cluster
              chmod +x /home/ec2-user/create-kops-cluster
              echo "#!/bin/bash" > /home/ec2-user/delete-kops-cluster
              echo "kops delete cluster ${AWS_CLUSTER_NAME}" > /home/ec2-user/delete-kops-cluster
              chmod +x /home/ec2-user/delete-kops-cluster
              echo "#!/bin/bash" > /home/ec2-user/create-secret
              echo 'kubectl create secret generic secrets --from-file=revprox-cert=certs/domain.crt --from-file=revprox-key=certs/domain.key --from-literal=postgres-password="gordonpass" --from-literal=payment-token="staging"' >> /home/ec2-user/create-secret
              chmod +x /home/ec2-user/create-secret
              echo "#!/bin/bash" > /home/ec2-user/delete-secret
              echo 'kubectl delete secret secrets"' >> /home/ec2-user/delete-secret
              chmod +x /home/ec2-user/delete-secret              
              
  KopsInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  # EC2AdminAccessProfile:
    # Type: AWS::IAM::InstanceProfile
    # Properties:
      # Roles:
        # - Ref: EC2AdminAccessRole
      # InstanceProfileName: "EC2AdminAccessProfile"
  # EC2AdminAccessRole:
    # Type: AWS::IAM::Role
    # Properties:
      # AssumeRolePolicyDocument:
        # Version: "2012-10-17"
        # Statement: 
          # - 
            # Effect: "Allow"
            # Principal: 
              # Service: 
                # - "ec2.amazonaws.com"
            # Action: 
              # - "sts:AssumeRole"
      # Policies:
        # - 
          # PolicyName: "root"
          # PolicyDocument: 
            # Version: "2012-10-17"
            # Statement: 
              # - 
                # Effect: "Allow"
                # Action: "*"
                # Resource: "*"
      # RoleName: "EC2AdminAccessRole"
